S ::= Program EOF
Program ::= DefList StatementList
DefList ::= Def DefList 
DefList ::= ''
Def ::= def ID ( TypedVarList ) Return : NEWLINE Block
TypedVar ::= ID : Type
Type ::= int
Type ::= str
Type ::= [ Type ]
TypedVarList ::= ''
TypedVarList ::= TypedVar TypedVarListTail
TypedVarListTail ::= , TypedVar TypedVarListTail
TypedVarListTail ::= ''
Return ::= ''
Return ::= -> Type
Block ::= INDENT Statement StatementList DEDENT
StatementList ::= Statement StatementList
StatementList ::= ''
Statement ::= SimpleStatement NEWLINE
Statement ::= if Expr : NEWLINE Block ElifList Else
Statement ::= while Expr : NEWLINE Block
Statement ::= for ID in Expr : NEWLINE Block
ElifList ::= Elif ElifList
ElifList ::= ''
Elif ::= elif Expr : NEWLINE Block
Else ::= ''
Else ::= else : NEWLINE Block
SimpleStatement ::= Expr SSTail
SSTail ::= ''
SSTail ::= = Expr
SimpleStatement ::= pass
SimpleStatement ::= return ReturnExpr
ReturnExpr ::= Expr
ReturnExpr ::= ''
Expr ::= orExpr ExprPrime
ExprPrime ::= if andExpr else andExpr ExprPrime
ExprPrime ::= ''
orExpr ::= andExpr orExprPrime
orExprPrime ::= or andExpr orExprPrime
orExprPrime ::= ''
andExpr ::= notExpr andExprPrime
andExprPrime ::= and notExpr andExprPrime
andExprPrime ::= ''
notExpr ::= CompExpr notExprPrime
notExprPrime ::= not CompExpr notExprPrime
notExprPrime ::= ''
CompExpr ::= IntExpr CompExprPrime
CompExprPrime ::= CompOp IntExpr CompExprPrime
CompExprPrime ::= ''
IntExpr ::= Term IntExprPrime
IntExprPrime ::= + Term IntExprPrime
IntExprPrime ::= - Term IntExprPrime
IntExprPrime ::= ''
Term ::= Factor TermPrime
TermPrime ::= * Factor TermPrime 
TermPrime ::= // Factor TermPrime 
TermPrime ::= % Factor TermPrime 
TermPrime ::= ''
Factor ::= - Factor
Factor ::= Name
Factor ::= Literal
Factor ::= List
Factor ::= ( Expr )
Name ::= ID NameTail
NameTail ::= ''
NameTail ::= ( ExprList )
NameTail ::= List
Literal ::= None
Literal ::= True
Literal ::= False
Literal ::= INTEGER
Literal ::= STRING
List ::= [ ExprList ]
ExprList ::= ''
ExprList ::= Expr ExprListTail
ExprListTail ::= ''
ExprListTail ::= , Expr ExprListTail
CompOp ::= == 
CompOp ::= != 
CompOp ::= < 
CompOp ::= > 
CompOp ::= <= 
CompOp ::= >= 
CompOp ::= is
