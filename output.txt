
ID * INTEGER  + INTEGER * ID  - STRING <=  INTEGER not True and False or True
AND TRUE NOT FALSE MUL INTEGER  NOT STRING AND TRUE MOD NONE 
INTEGER MUL INTEGER  AND ID MUL FALSE  EQ  ID AND FALSE
ID MUL INTEGER  ADD INTEGER MUL ID  SUB STRING EQ  INTEGER NOT TRUE EQ  ID AND FALSE OR TRUE
DEF ID LPAREN ID COLON INT RPAREN COLON NEWLINE INDENT ID TermPrime CompExprPrime andExprPrime ExprPrime NEWLINE DEDENT  EOF
ID
def ID ( ID : int , ID : str , ID : [ int ] ) : NEWLINE INDENT pass NEWLINE ID NEWLINE DEDENT  EOF
== 
def ID ( ID : int , ID : [ str ] ) -> [ int ] : NEWLINE INDENT INTEGER * ID  - ID ( ID ==  True ) NEWLINE if False <=  ID : NEWLINE INDENT while ID >  ID : NEWLINE INDENT [ ID ] NEWLINE DEDENT return False NEWLINE DEDENT elif - ID not ID // ID  : NEWLINE INDENT for ID in INTEGER : NEWLINE INDENT [ None ] NEWLINE DEDENT DEDENT DEDENT  pass NEWLINE EOF
EOF
if ID ==  ID : NEWLINE INDENT pass NEWLINE DEDENT else : NEWLINE INDENT ID * ( ID and ID )  + ID NEWLINE DEDENT EOF
def ID ( ID : int ) -> int : NEWLINE INDENT pass NEWLINE return ID * ID  + False or ID if True // ( ID )  else ID NEWLINE DEDENT  if INTEGER : NEWLINE INDENT pass NEWLINE ID * INTEGER // INTEGER   = ID NEWLINE while [ INTEGER + ID , ID - ID ] % STRING  : NEWLINE INDENT ID = INTEGER <=  - STRING NEWLINE DEDENT DEDENT elif INTEGER >  INTEGER : NEWLINE INDENT pass NEWLINE DEDENT elif INTEGER not False : NEWLINE INDENT for ID in ID : NEWLINE INDENT ( True and [ ID ] or ID ) NEWLINE DEDENT DEDENT else : NEWLINE INDENT pass NEWLINE DEDENT EOF